#!/usr/bin/env python

import subprocess
import os
import sys

class ContextFactory:

    hg  = { "marker" : ".hg", "status" : "hg stat" }
    git = { "marker" : ".git", "status" : "git status" }
    dvc = [hg, git]

    linux   = { "name" : "linux", "clang" : "clang-format" }
    osx     = { "name" : "darwin", "clang" : "clang-format" }
    windows = { "name" : "win32", "clang" : "clang-format.exe" }
    os = [linux, osx, windows]

    def create_context(self):
        """ Create formatter context. """
        dvc = self.determine_dvc()
        os  = self.determine_os()
        if dvc is None or os is None:
            return None
        return { "status" : dvc["status"],
                 "clang" : os["clang"] }

    def determine_dvc(self):
        """ Determine what version control system is present. """
        for instance in self.dvc:
            if os.path.isdir(instance["marker"]):
                return instance
        return None

    def determine_os(self):
        """ Determine which OS is running the script. """
        for instance in self.os:
            if instance["name"] in sys.platform:
                return instance
        return None

class Formatter:

    source_extensions = ['.cpp', '.hpp']

    def __init__(self, context):
        self.context = context

    def get_modified_source_files(self):
        """ Get source files modified in DVC. """
        files = []
        process = subprocess.Popen(
                self.context["status"],
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT)
        for line in process.stdout.readlines():
            for extension in self.source_extensions:
                if extension in line:
                    files.append(line.rstrip().split(" ")[-1])
        return files

    def format_modified_source_files(self):
        """ Format source files modified in DVC. """
        files = self.get_modified_source_files()
        for source_file in files:
            print("Formatting " + source_file)
            cmd = self.context["clang"] + " -i " + source_file
            process = subprocess.Popen(cmd, shell=True)

if __name__ == "__main__":
    context_factory = ContextFactory()
    context = context_factory.create_context()
    if context is None:
        print("No DVC root markers found. Are you sure you are located in the root of the repository?")
    else:
        formatter = Formatter(context)
        formatter.format_modified_source_files()


